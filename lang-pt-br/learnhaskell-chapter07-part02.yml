title: Data.List

text: The [code]Data.List[/code] module is all about lists, obviously. It provides some very useful functions for dealing with them. We've already met some of its functions (like [code]map[/code] and [code]filter[/code]) because the [code]Prelude[/code] module exports some functions from [code]Data.List[/code] for convenience. You don't have to import [code]Data.List[/code] via a qualified import because it doesn't clash with any [code]Prelude[/code] names except for those that [code]Prelude[/code] already steals from [code]Data.List[/code]. Let's take a look at some of the functions that we haven't met before.

[function]intersperse[/function] takes an element and a list and then puts that element in between each pair of elements in the list. Here's a demonstration:



[function]intercalate[/function] takes a list of lists and a list. It then inserts that list in between all those lists and then flattens the result.



[function]transpose[/function] transposes a list of lists. If you look at a list of lists as a 2D matrix, the columns become the rows and vice versa.



Say we have the polynomials <i>3x<sup>2</sup> + 5x + 9</i>, <i>10x<sup>3</sup> + 9</i> and <i>8x<sup>3</sup> + 5x<sup>2</sup> + x - 1</i> and we want to add them together. We can use the lists [code][0,3,5,9][/code], [code][10,0,0,9][/code] and [code][8,5,1,-1][/code] to represent them in Haskell. Now, to add them, all we have to do is this:



When we transpose these three lists, the third powers are then in the first row, the second powers in the second one and so on. Mapping [code]sum[/code] to that produces our desired result.

[function]foldl'[/function], [function]foldl1'[/function], [function]foldr'[/function] and [function]foldr1'[/function] are strict versions of their respective lazy incarnations. When using lazy folds on really big lists, you might often get a stack overflow error. The culprit for that is that due to the lazy nature of the folds, the accumulator value isn't actually updated as the folding happens. What actually happens is that the accumulator kind of makes a promise that it will compute its value when asked to actually produce the result. That happens for every intermediate accumulator and all those promises overflow your stack. The strict folds aren't lazy buggers and actually compute the intermediate values as they go along instead of filling up your stack with promises. So if you ever get stack overflow errors when doing lazy folds, try switching to their strict versions.

[function]concat[/function] flattens a list of lists into just a list of elements.



It will just remove one level of nesting. So if you want to completely flatten [code][[[2,3],[3,4,5],[2]],[[2,3],[3,4]]][/code], which is a list of lists of lists, you have to concatenate it twice.

Doing [function]concatMap[/function] is the same as first mapping a function to a list and then concatenating the list with [code]concat[/code].




[function]and[/function] takes a list of boolean values and returns [code]True[/code] only if all the values in the list are [code]True[/code].




[function]or[/function] is like [code]and[/code], only it returns [code]True[/code] if any of the boolean values in a list is [code]True[/code].




[function]any[/function] and [function]all[/function] take a predicate and then check if any or all the elements in a list satisfy the predicate, respectively. Usually we use these two functions instead of mapping over a list and then doing [code]and[/code] or [code]or[/code].



[function]iterate[/function] takes a function and a starting value. It applies the function to the starting value, then it applies that function to the result, then it applies the function to that result again, etc. It returns all the results in the form of an infinite list.



[function]splitAt[/function] takes a number and a list. It then splits the list at that many elements, returning the resulting two lists in a tuple.



[function]takeWhile[/function] is a really useful little function. It takes elements from a list while the predicate holds and then when an element is encountered that doesn't satisfy the predicate, it's cut off. It turns out this is very useful.




Say we wanted to know the sum of all third powers that are under 10,000. We can't map [code](^3)[/code] to [code][1..][/code], apply a filter and then try to sum that up because filtering an infinite list never finishes. You may know that all the elements here are ascending but Haskell doesn't. That's why we can do this:




We apply [code](^3)[/code] to an infinite list and then once an element that's over 10,000 is encountered, the list is cut off. Now we can sum it up easily.

[function]dropWhile[/function] is similar, only it drops all the elements while the predicate is true. Once predicate equates to [code]False[/code], it returns the rest of the list. An extremely useful and lovely function!



We're given a list that represents the value of a stock by date. The list is made of tuples whose first component is the stock value, the second is the year, the third is the month and the fourth is the date. We want to know when the stock value first exceeded one thousand dollars!




[function]span[/function] is kind of like [code]takeWhile[/code], only it returns a pair of lists. The first list contains everything the resulting list from [code]takeWhile[/code] would contain if it were called with the same predicate and the same list. The second list contains the part of the list that would have been dropped.




Whereas [code]span[/code] spans the list while the predicate is true, [function]break[/function] breaks it when the predicate is first true. Doing [code]break p[/code] is the equivalent of doing [code]span (not . p)[/code].



When using [code]break[/code], the second list in the result will start with the first element that satisfies the predicate.

[function]sort[/function] simply sorts a list. The type of the elements in the list has to be part of the [code]Ord[/code] typeclass, because if the elements of a list can't be put in some kind of order, then the list can't be sorted.




[function]group[/function] takes a list and groups adjacent elements into sublists if they are equal.



If we sort a list before grouping it, we can find out how many times each element appears in the list.




[function]inits[/function] and [function]tails[/function] are like [code]init[/code] and [code]tail[/code], only they recursively apply that to a list until there's nothing left. Observe.



Let's use a fold to implement searching a list for a sublist.



First we call [code]tails[/code] with the list in which we're searching. Then we go over each tail and see if it starts with what we're looking for.

With that, we actually just made a function that behaves like [function]isInfixOf[/function]. [code]isInfixOf[/code] searches for a sublist within a list and returns [code]True[/code] if the sublist we're looking for is somewhere inside the target list.



[function]isPrefixOf[/function] and [function]isSuffixOf[/function] search for a sublist at the beginning and at the end of a list, respectively.



[function]elem[/function] and [function]notElem[/function] check if an element is or isn't inside a list. 

[function]partition[/function] takes a list and a predicate and returns a pair of lists. The first list in the result contains all the elements that satisfy the predicate, the second contains all the ones that don't.




It's important to understand how this is different from [code]span[/code] and [code]break[/code]:



While [code]span[/code] and [code]break[/code] are done once they encounter the first element that doesn't and does satisfy the predicate, [code]partition[/code] goes through the whole list and splits it up according to the predicate.

[function]find[/function] takes a list and a predicate and returns the first element that satisfies the predicate. But it returns that element wrapped in a [code]Maybe[/code] value. We'll be covering algebraic data types more in depth in the next chapter but for now, this is what you need to know: a [code]Maybe[/code] value can either be [code]Just something[/code] or [code]Nothing[/code]. Much like a list can be either an empty list or a list with some elements, a [code]Maybe[/code] value can be either no elements or a single element. And like the type of a list of, say, integers is [code][Int][/code], the type of maybe having an integer is [code]Maybe Int[/code]. Anyway, let's take our [code]find[/code] function for a spin.





Notice the type of [code]find[/code]. Its result is [code]Maybe a[/code]. That's kind of like having the type of [code][a][/code], only a value of the type [code]Maybe[/code] can contain either no elements or one element, whereas a list can contain no elements, one element or several elements.

Remember when we were searching for the first time our stock went over $1000. We did [code]head (dropWhile (\(val,y,m,d) -&gt; val &lt; 1000) stock)[/code]. Remember that [code]head[/code] is not really safe. What would happen if our stock never went over $1000? Our application of [code]dropWhile[/code] would return an empty list and getting the head of an empty list would result in an error. However, if we rewrote that as [code]find (\(val,y,m,d) -&gt; val &gt; 1000) stock[/code], we'd be much safer. If our stock never went over $1000 (so if no element satisfied the predicate), we'd get back a [code]Nothing[/code]. But there was a valid answer in that list, we'd get, say, [code]Just (1001.4,2008,9,4)

[function]elemIndex[/function] is kind of like [code]elem[/code], only it doesn't return a boolean value. It maybe returns the index of the element we're looking for. If that element isn't in our list, it returns a [code]Nothing[/code]. 


[function]elemIndices[/function] is like [code]elemIndex[/code], only it returns a list of indices, in case the element we're looking for crops up in our list several times. Because we're using a list to represent the indices, we don't need a [code]Maybe[/code] type, because failure can be represented as the empty list, which is very much synonymous to [code]Nothing[/code].




[function]findIndex[/function] is like find, but it maybe returns the index of the first element that satisfies the predicate. [function]findIndices[/function] returns the indices of all elements that satisfy the predicate in the form of a list.




We already covered [code]zip[/code] and [code]zipWith[/code]. We noted that they zip together two lists, either in a tuple or with a binary function (meaning such a function that takes two parameters). But what if we want to zip together three lists? Or zip three lists with a function that takes three parameters? Well, for that, we have [function]zip3[/function], [function]zip4[/function], etc. and [function]zipWith3[/function], [function]zipWith4[/function], etc. These variants go up to 7. While this may look like a hack, it works out pretty fine, because there aren't many times when you want to zip 8 lists together. There's also a very clever way for zipping infinite numbers of lists, but we're not advanced enough to cover that just yet.




Just like with normal zipping, lists that are longer than the shortest list that's being zipped are cut down to size.

[function]lines[/function] is a useful function when dealing with files or input from somewhere. It takes a string and returns every line of that string in a separate list.




[code]'\n'[/code] is the character for a unix newline. Backslashes have special meaning in Haskell strings and characters.

[function]unlines[/function] is the inverse function of [code]lines[/code]. It takes a list of strings and joins them together using a [code]'\n'[/code].



[function]words[/function] and [function]unwords[/function] are for splitting a line of text into words or joining a list of words into a text. Very useful.




We've already mentioned [function]nub[/function]. It takes a list and weeds out the duplicate elements, returning a list whose every element is a unique snowflake! The function does have a kind of strange name. It turns out that "nub" means a small lump or essential part of something. In my opinion, they should use real words for function names instead of old-people words.




[function]delete[/function] takes an element and a list and deletes the first occurence of that element in the list.




[function]\\[/function] is the list difference function. It acts like a set difference, basically. For every element in the right-hand list, it removes a matching element in the left one.




Doing [code][1..10] \\ [2,5,9][/code] is like doing [code]delete 2 . delete 5 . delete 9 $ [1..10][/code].

[function]union[/function] also acts like a function on sets. It returns the union of two lists. It pretty much goes over every element in the second list and appends it to the first one if it isn't already in yet. Watch out though, duplicates are removed from the second list!




[function]intersect[/function] works like set intersection. It returns only the elements that are found in both lists.




[function]insert[/function] takes an element and a list of elements that can be sorted and inserts it into the list. It will insert it so that all the elements to its right are greater than or equal to it. If we use [code]insert[/code] to insert into a sorted list, the resulting list will be kept sorted.





What [code]length[/code], [code]take[/code], [code]drop[/code], [code]splitAt[/code], [code]!![/code] and [code]replicate[/code] have in common is that they take an [code]Int[/code] as one of their parameters, even though they could be more generic and usable if they just took any type that's part of the [code]Integral[/code] or [code]Num[/code] typeclasses (depending on the functions). They do that for historical reasons. However, fixing that would probably break a lot of existing code. That's why [code]Data.List[/code] has their more generic equivalents, named [function]genericLength[/function], [function]genericTake[/function], [function]genericDrop[/function], [function]genericSplitAt[/function], [function]genericIndex[/function] and [function]genericReplicate[/function]. For instance, [code]length[/code] has a type signature of [code]length :: [a] -&gt; Int[/code]. If we try to get the average of a list of numbers by doing [code]let xs = [1..6] in sum xs / length xs[/code], we get a type error, because you can't use [code]/[/code] with an [code]Int[/code]. [code]genericLength[/code], on the other hand, has a type signature of [code]genericLength :: (Num a) =&gt; [b] -&gt; a[/code]. Because a [code]Num[/code] can act like a floating point number, getting the average by doing [code]let xs = [1..6] in sum xs / genericLength xs[/code] works out just fine.

The [code]nub[/code], [code]delete[/code], [code]union[/code], [code]intersect[/code] and [code]group[/code] functions all have their more general counterparts called [function]nubBy[/function], [function]deleteBy[/function], [function]unionBy[/function], [function]intersectBy[/function] and [function]groupBy[/function]. The difference between them is that the first set of functions use [code]==[/code] to test for equality, whereas the <i>By</i> ones also take an equality function and then compare them by using that equality function. [code]group[/code] is the same as [code]groupBy (==)[/code].

For instance, say we have a list that describes the value of a function for every second. We want to segment it into sublists based on when the value was below zero and when it went above. If we just did a normal [code]group[/code], it would just group the equal adjacent values together. But what we want is to group them by whether they are negative or not. That's where [code]groupBy[/code] comes in! The equality function supplied to the <i>By</i> functions should take two elements of the same type and return [code]True[/code] if it considers them equal by its standards.




From this, we clearly see which sections are positive and which are negative. The equality function supplied takes two elements and then returns [code]True[/code] only if they're both negative or if they're both positive. This equality function can also be written as [code]\x y -&gt; (x &gt; 0) &amp;&amp; (y &gt; 0) || (x &lt;= 0) &amp;&amp; (y &lt;= 0)[/code], although I think the first way is more readable. An even clearer way to write equality functions for the <i>By</i> functions is if you import the [function]on[/function] function from [code]Data.Function[/code]. [code]on[/code] is defined like this:




So doing [code](==) `on` (&gt; 0)[/code] returns an equality function that looks like [code]\x y -&gt; (x &gt; 0) == (y &gt; 0)[/code]. [code]on[/code] is used a lot with the <i>By</i> functions because with it, we can do:





Very readable indeed! You can read it out loud: Group this by equality on whether the elements are greater than zero.

Similarly, the [code]sort[/code], [code]insert[/code], [code]maximum[/code] and [code]minimum[/code] also have their more general equivalents. Functions like [code]groupBy[/code] take a function that determines when two elements are equal. [function]sortBy[/function], [function]insertBy[/function], [function]maximumBy[/function] and [function]minimumBy[/function] take a function that determine if one element is greater, smaller or equal to the other. The type signature of [code]sortBy[/code] is [code]sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a][/code]. If you remember from before, the [code]Ordering[/code] type can have a value of [code]LT[/code], [code]EQ[/code] or [code]GT[/code]. [code]sort[/code] is the equivalent of [code]sortBy compare[/code], because compare just takes two elements whose type is in the [code]Ord[/code] typeclass and returns their ordering relationship.

Lists can be compared, but when they are, they are compared lexicographically. What if we have a list of lists and we want to sort it not based on the inner lists' contents but on their lengths? Well, as you've probably guessed, we'll use the [code]sortBy[/code] function.




Awesome! [code]compare `on` length[/code] ... man, that reads almost like real English! If you're not sure how exactly the [code]on[/code] works here, [code]compare `on` length[/code] is the equivalent of [code]\x y -&gt; length x `compare` length y[/code]. When you're dealing with <i>By</i> functions that take an equality function, you usually do [code](==) `on` something[/code] and when you're dealing with <i>By</i> functions that take an ordering function, you usually do [code]compare `on` something[/code].
