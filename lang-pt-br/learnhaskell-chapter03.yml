chapter: Types and Typeclasses

title: Believe the type

text: Previously we mentioned that Haskell has a static type system. The type of every expression is known at compile time, which leads to safer code. If you write a program where you try to divide a boolean type with some number, it won't even compile. That's good because it's better to catch such errors at compile time instead of having your program crash. Everything in Haskell has a type, so the compiler can reason quite a lot about your program before compiling it.

Unlike Java or Pascal, Haskell has type inference. If we write a number, we don't have to tell Haskell it's a number. It can infer that on its own, so we don't have to explicitly write out the types of our functions and expressions to get things done. We covered some of the basics of Haskell with only a very superficial glance at types. However, understanding the type system is a very important part of learning Haskell.

A type is a kind of label that every expression has. It tells us in which category of things that expression fits. The expression [code]True[/code] is a boolean, [code]"hello"[/code] is a string, etc.

Now we'll use GHCI to examine the types of some expressions. We'll do that by using the [code]:t[/code] command which, followed by any valid expression, tells us its type. Let's give it a whirl.

Here we see that doing [code]:t[/code] on an expression prints out the expression followed by [code]::[/code] and its type. [code]::[/code] is read as "has type of". Explicit types are always denoted with the first letter in capital case. [code]'a'[/code], as it would seem, has a type of [code]Char[/code]. It's not hard to conclude that it stands for <i>character</i>. [code]True[/code] is of a [code]Bool[/code] type. That makes sense. But what's this? Examining the type of [code]"HELLO!"[/code] yields a [code][Char][/code]. The square brackets denote a list. So we read that as it being <i>a list of characters</i>. Unlike lists, each tuple length has its own type. So the expression of [code](True, 'a')[/code] has a type of [code](Bool, Char)[/code], whereas an expression such as [code]('a','b','c')[/code] would have the type of [code](Char, Char, Char)[/code]. [code]4 == 5[/code] will always return [code]False[/code], so its type is [code]Bool.[/code]


Functions also have types. When writing our own functions, we can choose to give them an explicit type declaration. This is generally considered to be good practice except when writing very short functions. From here on, we'll give all the functions that we make type declarations. Remember the list comprehension we made previously that filters a string so that only caps remain? Here's how it looks like with a type declaration.


[code]removeNonUppercase[/code] has a type of [code][Char] -&gt; [Char][/code], meaning that it maps from a string to a string. That's because it takes one string as a parameter and returns another as a result. The [code][Char][/code] type is synonymous with [code]String[/code] so it's clearer if we write [code]removeNonUppercase :: String -&gt; String[/code]. We didn't have to give this function a type declaration because the compiler can infer by itself that it's a function from a string to a string but we did anyway. But how do we write out the type of a function that takes several parameters? Here's a simple function that takes three integers and adds them together:


The parameters are separated with [code]-&gt;[/code] and there's no special distinction between the parameters and the return type. The return type is the last item in the declaration and the parameters are the first three. Later on we'll see why they're all just separated with [code]-&gt;[/code] instead of having some more explicit distinction between the return types and the parameters like [code]Int, Int, Int -&gt; Int[/code] or something.

If you want to give your function a type declaration but are unsure as to what it should be, you can always just write the function without it and then check it with [code]:t[/code]. Functions are expressions too, so [code]:t[/code] works on them without a problem.

Here's an overview of some common types.

[code]Int[/code] stands for integer. It's used for whole numbers. [code]7[/code] can be an [code]Int[/code] but [code]7.2[/code] cannot. [code]Int[/code] is bounded, which means that it has a minimum and a maximum value. Usually on 32-bit machines the maximum possible [code]Int[/code] is 2147483647 and the minimum is -2147483648.

[code]Integer[/code] stands for, er ... also integer. The main difference is that it's not bounded so it can be used to represent really really big numbers. I mean like really big. [code]Int[/code], however, is more efficient.


[code]Float[/code] is a real floating point with single precision.

[code]Double[/code] is a real floating point with double the precision!

[code]Bool[/code] is a boolean type. It can have only two values: [code]True[/code] and [code]False[/code].

[code]Char[/code] represents a character. It's denoted by single quotes. A list of characters is a string.

Tuples are types but they are dependent on their length as well as the types of their components, so there is theoretically an infinite number of tuple types, which is too many to cover in this tutorial. Note that the empty tuple [code]()[/code] is also a type which can only have a single value: [code]()[/code]

title: Type variables

text: What do you think is the type of the [code]head[/code] function? Because [code]head[/code] takes a list of any type and returns the first element, so what could it be? Let's check!


Hmmm! What is this [code]a[/code]? Is it a type? Remember that we previously stated that types are written in capital case, so it can't exactly be a type. Because it's not in capital case it's actually a <em>type variable</em>. That means that [code]a[/code] can be of any type. This is much like generics in other languages, only in Haskell it's much more powerful because it allows us to easily write very general functions if they don't use any specific behavior of the types in them. Functions that have type variables are called <em>polymorphic functions</em>. The type declaration of [code]head[/code] states that it takes a list of any type and returns one element of that type.


Although type variables can have names longer than one character, we usually give them names of a, b, c, d ...

Remember [code]fst[/code]? It returns the first component of a pair. Let's examine its type.

We see that [code]fst[/code] takes a tuple which contains two types and returns an element which is of the same type as the pair's first component. That's why we can use [code]fst[/code] on a pair that contains any two types. Note that just because [code]a[/code] and [code]b[/code] are different type variables, they don't have to be different types. It just states that the first component's type and the return value's type are the same.


title: Typeclasses 101

text: A typeclass is a sort of interface that defines some behavior. If a type is a part of a typeclass, that means that it supports and implements the behavior the typeclass describes. A lot of people coming from OOP get confused by typeclasses because they think they are like classes in object oriented languages. Well, they're not. You can think of them kind of as Java interfaces, only better.

What's the type signature of the [code]==[/code] function?

<em>Note</em>: the equality operator, [code]==[/code] is a function. So are [code]+[/code], [code]*[/code], [code]-[/code], [code]/[/code] and pretty much all operators. If a function is comprised only of special characters, it's considered an infix funciton by default. If we want to examine its type, pass it to another function or call it as a prefix function, we have to surround it in parentheses.


Interesting. We see a new thing here, the [code]=&gt;[/code] symbol. Everything before the [code]=&gt;[/code] symbol is called a <em>class constraint</em>. We can read the previous type declaration like this: the equality function takes any two values that are of the same type and returns a [code]Bool[/code]. The type of those two values must be a member of the [code]Eq[/code] class (this was the class constraint).

The [code]Eq[/code] typeclass provides an interface for testing for equality. Any type where it makes sense to test for equality between two values of that type should be a member of the [code]Eq[/code] class. All standard Haskell types except for IO (the type for dealing with input and output) and functions are a part of the [code]Eq[/code] typeclass.

The [code]elem[/code] function has a type of [code](Eq a) =&gt; a -&gt; [a] -&gt; Bool[/code] because it uses [code]==[/code] over a list to check whether some value we're looking for is in it.

Some basic typeclasses:
[code]Eq[/code] is used for types that support equality testing. The functions its members implement are [code]==[/code] and [code]/=[/code]. So if there's an [code]Eq[/code] class constraint for a type variable in a function, it uses [code]==[/code] or [code]/=[/code] somewhere inside its definition. All the types we mentioned previously except for functions are part of [code]Eq[/code], so they can be tested for equality.


[code]Ord[/code] is for types that have an ordering.

All the types we covered so far except for functions are part of [code]Ord[/code]. [code]Ord[/code] covers all the standard comparing functions such as [code]&gt;[/code], [code]&lt;[/code], [code]&gt;=[/code] and [code]&lt;=[/code]. The [code]compare[/code] function takes two [code]Ord[/code] members of the same type and returns an ordering. [code]Ordering[/code] is a type that can be [code]GT[/code], [code]LT[/code] or [code]EQ[/code], meaning <i>greater than</i>, <i>lesser than</i> and <i>equal</i>, respectively. 

To be a member of [code]Ord[/code], a type must first have membership in the prestigious and exclusive [code]Eq[/code] club.

Members of [code]Show[/code] can be presented as strings. All types covered so far except for functions are a part of [code]Show[/code]. The most used function that deals with the [code]Show[/code] typeclass is [code]show[/code]. It takes a value whose type is a member of [code]Show[/code] and presents is to us as a string.

[code]Read[/code] is sort of the opposite typeclass of [code]Show[/code]. The [code]read[/code] function takes a string and returns a type which is a member of [code]Read[/code].

So far so good. Again, all types covered so far are in this typeclass. But what happens if we try to do just [code]read "4"[/code]?


What GHCI is telling us here is that it doesn't know what we want in return. Notice that in the previous uses of [code]read[/code] we did something with the result afterwards. That way, GHCI could infer what kind of result we wanted out of our [code]read[/code]. If we used it as a boolean, it knew it had to return a [code]Bool[/code]. But now, it knows we want some type that is part of the [code]Read[/code] class, it just doesn't know which one. Let's take a look at the type signature of [code]read[/code].


See? It returns a type that's part of [code]Read[/code] but if we don't try to use it in some way later, it has no way of knowing which type. That's why we can use explicit <em>type annotations</em>. Type annotations are a way of explicitly saying what the type of an expression should be. We do that by adding [code]::[/code] at the end of the expression and then specifying a type. Observe:

Most expressions are such that the compiler can infer what their type is by itself. But sometimes, the compiler doesn't know whether to return a value of type [code]Int[/code] or [code]Float[/code] for an expression like [code]read "5"[/code]. To see what the type is, Haskell would have to actually evaluate [code]read "5"[/code]. But since Haskell is a statically typed language, it has to know all the types before the code is compiled (or in the case of GHCI, evaluated). So we have to tell Haskell: "Hey, this expression should have this type, in case you don't know!".

[code]Enum[/code] members are sequentially ordered types &mdash; they can be enumerated. The main advantage of the [code]Enum[/code] typeclass is that we can use its types in list ranges. They also have defined successors and predecesors, which you can get with the [code]succ[/code] and [code]pred[/code] functions. Types in this class: [code]()[/code], [code]Bool[/code], [code]Char[/code], [code]Ordering[/code], [code]Int[/code], [code]Integer[/code], [code]Float[/code] and [code]Double[/code].

[code]Bounded[/code] members have an upper and a lower bound.

[code]minBound[/code] and [code]maxBound[/code] are interesting because they have a type of [code](Bounded a) =&gt; a[/code]. In a sense they are polymorphic constants.

All tuples are also part of [code]Bounded[/code] if the components are also in it.

[code]Num[/code] is a numeric typeclass. Its members have the property of being able to act like numbers. Let's examine the type of a number.

It appears that whole numbers are also polymorphic constants. They can act like any type that's a member of the [code]Num[/code] typeclass.

Those are types that are in the [code]Num[/code] typeclass. If we examine the type of [code]*[/code], we'll see that it accepts all numbers.

It takes three numbers of the same type. That's why [code](5 :: Int) * (6 :: Integer)[/code] will result in a type error whereas [code]5 * (6 :: Integer)[/code] will work just fine and produce an [code]Integer[/code].

To join [code]Num[/code], a type must already be friends with [code]Show[/code] and [code]Eq[/code].

[code]Integral[/code] is also a numeric typeclass. [code]Num[/code] includes all numbers, including real numbers and integral numbers, [code]Integral[/code] includes only integral (whole) numbers. In this typeclass are [code]Int[/code] and [code]Integer[/code].

[code]Floating[/code] includes only floating point numbers, so [code]Float[/code] and [code]Double[/code].


A very useful function for dealing with numbers is [code]fromIntegral[/code]. It has a type declaration of [code]fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b[/code]. From its type signature we see that it takes an integral number and turns it into a more general number. That's useful when you want integral and floating point types to work together nicely. For instance, the [code]length[/code] function has a type declaration of [code]length :: [a] -&gt; Int[/code] instead of having a more general type of [code](Num b) =&gt; length :: [a] -&gt; b[/code]. I think that's there for historical reasons or something, although in my opinion, it's pretty stupid. Anyway, if we try to get a length of a list and then add it to [code]3.2[/code], we'll get an error because we tried to add together an [code]Int[/code] and a floating point number. So to get around this, we do [code]fromIntegral (length [1,2,3,4]) + 3.2[/code] and it all works out.

Notice that [code]fromIntegral[/code] has several class constraints in its type signature. That's completely valid and as you can see, the class constraints are separated by commas inside the parentheses.

