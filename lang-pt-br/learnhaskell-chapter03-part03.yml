title: Typeclasses 101

text: A typeclass is a sort of interface that defines some behavior. If a type is a part of a typeclass, that means that it supports and implements the behavior the typeclass describes. A lot of people coming from OOP get confused by typeclasses because they think they are like classes in object oriented languages. Well, they're not. You can think of them kind of as Java interfaces, only better.

What's the type signature of the [code]==[/code] function?

<em>Note</em>: the equality operator, [code]==[/code] is a function. So are [code]+[/code], [code]*[/code], [code]-[/code], [code]/[/code] and pretty much all operators. If a function is comprised only of special characters, it's considered an infix funciton by default. If we want to examine its type, pass it to another function or call it as a prefix function, we have to surround it in parentheses.


Interesting. We see a new thing here, the [code]=&gt;[/code] symbol. Everything before the [code]=&gt;[/code] symbol is called a <em>class constraint</em>. We can read the previous type declaration like this: the equality function takes any two values that are of the same type and returns a [code]Bool[/code]. The type of those two values must be a member of the [code]Eq[/code] class (this was the class constraint).

The [code]Eq[/code] typeclass provides an interface for testing for equality. Any type where it makes sense to test for equality between two values of that type should be a member of the [code]Eq[/code] class. All standard Haskell types except for IO (the type for dealing with input and output) and functions are a part of the [code]Eq[/code] typeclass.

The [code]elem[/code] function has a type of [code](Eq a) =&gt; a -&gt; [a] -&gt; Bool[/code] because it uses [code]==[/code] over a list to check whether some value we're looking for is in it.

Some basic typeclasses:
[code]Eq[/code] is used for types that support equality testing. The functions its members implement are [code]==[/code] and [code]/=[/code]. So if there's an [code]Eq[/code] class constraint for a type variable in a function, it uses [code]==[/code] or [code]/=[/code] somewhere inside its definition. All the types we mentioned previously except for functions are part of [code]Eq[/code], so they can be tested for equality.


[code]Ord[/code] is for types that have an ordering.

All the types we covered so far except for functions are part of [code]Ord[/code]. [code]Ord[/code] covers all the standard comparing functions such as [code]&gt;[/code], [code]&lt;[/code], [code]&gt;=[/code] and [code]&lt;=[/code]. The [code]compare[/code] function takes two [code]Ord[/code] members of the same type and returns an ordering. [code]Ordering[/code] is a type that can be [code]GT[/code], [code]LT[/code] or [code]EQ[/code], meaning <i>greater than</i>, <i>lesser than</i> and <i>equal</i>, respectively. 

To be a member of [code]Ord[/code], a type must first have membership in the prestigious and exclusive [code]Eq[/code] club.

Members of [code]Show[/code] can be presented as strings. All types covered so far except for functions are a part of [code]Show[/code]. The most used function that deals with the [code]Show[/code] typeclass is [code]show[/code]. It takes a value whose type is a member of [code]Show[/code] and presents is to us as a string.

[code]Read[/code] is sort of the opposite typeclass of [code]Show[/code]. The [code]read[/code] function takes a string and returns a type which is a member of [code]Read[/code].

So far so good. Again, all types covered so far are in this typeclass. But what happens if we try to do just [code]read "4"[/code]?


What GHCI is telling us here is that it doesn't know what we want in return. Notice that in the previous uses of [code]read[/code] we did something with the result afterwards. That way, GHCI could infer what kind of result we wanted out of our [code]read[/code]. If we used it as a boolean, it knew it had to return a [code]Bool[/code]. But now, it knows we want some type that is part of the [code]Read[/code] class, it just doesn't know which one. Let's take a look at the type signature of [code]read[/code].


See? It returns a type that's part of [code]Read[/code] but if we don't try to use it in some way later, it has no way of knowing which type. That's why we can use explicit <em>type annotations</em>. Type annotations are a way of explicitly saying what the type of an expression should be. We do that by adding [code]::[/code] at the end of the expression and then specifying a type. Observe:

Most expressions are such that the compiler can infer what their type is by itself. But sometimes, the compiler doesn't know whether to return a value of type [code]Int[/code] or [code]Float[/code] for an expression like [code]read "5"[/code]. To see what the type is, Haskell would have to actually evaluate [code]read "5"[/code]. But since Haskell is a statically typed language, it has to know all the types before the code is compiled (or in the case of GHCI, evaluated). So we have to tell Haskell: "Hey, this expression should have this type, in case you don't know!".

[code]Enum[/code] members are sequentially ordered types &mdash; they can be enumerated. The main advantage of the [code]Enum[/code] typeclass is that we can use its types in list ranges. They also have defined successors and predecesors, which you can get with the [code]succ[/code] and [code]pred[/code] functions. Types in this class: [code]()[/code], [code]Bool[/code], [code]Char[/code], [code]Ordering[/code], [code]Int[/code], [code]Integer[/code], [code]Float[/code] and [code]Double[/code].

[code]Bounded[/code] members have an upper and a lower bound.

[code]minBound[/code] and [code]maxBound[/code] are interesting because they have a type of [code](Bounded a) =&gt; a[/code]. In a sense they are polymorphic constants.

All tuples are also part of [code]Bounded[/code] if the components are also in it.

[code]Num[/code] is a numeric typeclass. Its members have the property of being able to act like numbers. Let's examine the type of a number.

It appears that whole numbers are also polymorphic constants. They can act like any type that's a member of the [code]Num[/code] typeclass.

Those are types that are in the [code]Num[/code] typeclass. If we examine the type of [code]*[/code], we'll see that it accepts all numbers.

It takes three numbers of the same type. That's why [code](5 :: Int) * (6 :: Integer)[/code] will result in a type error whereas [code]5 * (6 :: Integer)[/code] will work just fine and produce an [code]Integer[/code].

To join [code]Num[/code], a type must already be friends with [code]Show[/code] and [code]Eq[/code].

[code]Integral[/code] is also a numeric typeclass. [code]Num[/code] includes all numbers, including real numbers and integral numbers, [code]Integral[/code] includes only integral (whole) numbers. In this typeclass are [code]Int[/code] and [code]Integer[/code].

[code]Floating[/code] includes only floating point numbers, so [code]Float[/code] and [code]Double[/code].


A very useful function for dealing with numbers is [code]fromIntegral[/code]. It has a type declaration of [code]fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b[/code]. From its type signature we see that it takes an integral number and turns it into a more general number. That's useful when you want integral and floating point types to work together nicely. For instance, the [code]length[/code] function has a type declaration of [code]length :: [a] -&gt; Int[/code] instead of having a more general type of [code](Num b) =&gt; length :: [a] -&gt; b[/code]. I think that's there for historical reasons or something, although in my opinion, it's pretty stupid. Anyway, if we try to get a length of a list and then add it to [code]3.2[/code], we'll get an error because we tried to add together an [code]Int[/code] and a floating point number. So to get around this, we do [code]fromIntegral (length [1,2,3,4]) + 3.2[/code] and it all works out.

Notice that [code]fromIntegral[/code] has several class constraints in its type signature. That's completely valid and as you can see, the class constraints are separated by commas inside the parentheses.
