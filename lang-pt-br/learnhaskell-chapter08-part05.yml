title: Type synonyms

text:   Previously, we mentioned that when writing types, the [code][Char][/code] and [code]String [/code] types are equivalent and interchangeable. That's implemented with <em>type synonyms</em>. Type synonyms don't really do anything per se, they're just about giving some types different names so that they make more sense to someone reading our code and documentation. Here's how the standard library defines [code]String[/code] as a synonym for [code][Char][/code].




We've introduced the <i>type</i> keyword. The keyword might be misleading to some, because we're not actually making anything new (we did that with the <i>data</i> keyword), but we're just making a synonym for an already existing type.

If we make a function that converts a string to uppercase and call it [code]toUpperString[/code] or something, we can give it a type declaration of [code]toUpperString :: [Char] -&gt; [Char][/code] or [code]toUpperString :: String -&gt; String[/code]. Both of these are essentially the same, only the latter is nicer to read.

When we were dealing with the [code]Data.Map[/code] module, we first represented a phonebook with an association list before converting it into a map. As we've already found out, an association list is a list of key-value pairs. Let's look at a phonebook that we had.




We see that the type of [code]phoneBook[/code] is [code][(String,String)][/code]. That tells us that it's an association list that maps from strings to strings, but not much else. Let's make a type synonym to convey some more information in the type declaration.




Now the type declaration for our phonebook can be [code]phoneBook :: PhoneBook[/code]. Let's make a type synonym for [code]String[/code] as well.




Giving the [code]String[/code] type synonyms is something that Haskell programmers do when they want to convey more information about what strings in their functions should be used as and what they represent.

So now, when we implement a function that takes a name and a number and sees if that name and number combination is in our phonebook, we can give it a very pretty and descriptive type declaration.




If we decided not to use type synonyms, our function would have a type of [code]String -&gt; String -&gt; [(String,String)] -&gt; Bool[/code]. In this case, the type declaration that took advantage of type synonyms is easier to understand. However, you shouldn't go overboard with them. We introduce type synonyms either to describe what some existing type represents in our functions (and thus our type declarations become better documentation) or when something has a long-ish type that's repeated a lot (like [code][(String,String)][/code]) but represents something more specific in the context of our functions.

Type synonyms can also be parameterized. If we want a type that represents an association list type but still want it to be general so it can use any type as the keys and values, we can do this:




Now, a function that gets the value by a key in an association list can have a type of [code](Eq k) =&gt; k -&gt; AssocList k v -&gt; Maybe v[/code]. [code]AssocList[/code] is a type constructor that takes two types and produces a concrete type, like [code]AssocList Int String[/code], for instance.

<em>Fonzie says:</em> Aaay! When I talk about <i>concrete types</i> I mean like fully applied types like [code]Map Int String[/code] or if we're dealin' with one of them polymorphic functions, [code][a][/code] or [code](Ord a) =&gt; Maybe a[/code] and stuff. And like, sometimes me and the boys say that [code]Maybe[/code] is a type, but we don't mean that, cause every idiot knows [code]Maybe[/code] is a type constructor. When I apply an extra type to [code]Maybe[/code], like [code]Maybe String[/code], then I have a concrete type. You know, values can only have types that are concrete types! So in conclusion, live fast, love hard and don't let anybody else use your comb!

Just like we can partially apply functions to get new functions, we can partially apply type parameters and get new type constructors from them. Just like we call a function with too few parameters to get back a new function, we can specify a type constructor with too few type parameters and get back a partially applied type constructor. If we wanted a type that represents a map (from [code]Data.Map[/code]) from integers to something, we could either do this:




Or we could do it like this:




Either way, the [code]IntMap[/code] type constructor takes one parameter and that is the type of what the integers will point to.

<em>Oh yeah</em>. If you're going to try and implement this, you'll probably going to do a qualified import of [code]Data.Map[/code]. When you do a qualified import, type constructors also have to be preceeded with a module name. So you'd write [code]type IntMap = Map.Map Int[/code].

Make sure that you really understand the distinction between type constructors and value constructors. Just because we made a type synonym called [code]IntMap[/code] or [code]AssocList[/code] doesn't mean that we can do stuff like [code]AssocList [(1,2),(4,5),(7,9)][/code]. All it means is that we can refer to its type by using different names. We can do [code][(1,2),(3,5),(8,9)] :: AssocList Int Int[/code], which will make the numbers inside assume a type of [code]Int[/code], but we can still use that list as we would any normal list that has pairs of integers inside. Type synonyms (and types generally) can only be used in the type portion of Haskell. We're in Haskell's type portion whenever we're defining new types (so in <i>data</i> and <i>type</i> declarations) or when we're located after a [code]::[/code]. The [code]::[/code] is in type declarations or in type annotations.

Another cool data type that takes two types as its parameters is the [code]Either a b[/code] type. This is roughly how it's defined:




It has two value constructors. If the [code]Left[/code] is used, then its contents are of type [code]a[/code] and if [code]Right[/code] is used, then its contents are of type [code]b[/code]. So we can use this type to encapsulate a value of one type or another and then when we get a value of type [code]Either a b[/code], we usually pattern match on both [code]Left[/code] and [code]Right[/code] and we different stuff based on which one of them it was.





So far, we've seen that [code]Maybe a[/code] was mostly used to represent the results of computations that could have either failed or not. But somtimes, [code]Maybe a[/code] isn't good enough because [code]Nothing[/code] doesn't really convey much information other than that something has failed. That's cool for functions that can fail in only one way or if we're just not interested in how and why they failed. A [code]Data.Map[/code] lookup fails only if the key we were looking for wasn't in the map, so we know exactly what happened. However, when we're interested in how some function failed or why, we usually use the result type of [code]Either a b[/code], where [code]a[/code] is some sort of type that can tell us something about the possible failure and [code]b[/code] is the type of a successful computation. Hence, errors use the [code]Left[/code] value constructor while results use [code]Right[/code].

An example: a high-school has lockers so that students have some place to put their Guns'n'Roses posters. Each locker has a code combination. When a student wants a new locker, they tell the locker supervisor which locker number they want and he gives them the code. However, if someone is already using that locker, he can't tell them the code for the locker and they have to pick a different one. We'll use a map from [code]Data.Map[/code] to represent the lockers. It'll map from locker numbers to a pair of whether the locker is in use or not and the locker code.





Simple stuff. We introduce a new data type to represent whether a locker is taken or free and we make a type synonym for the locker code. We also make a type synonym for the type that maps from integers to pairs of locker state and code. And now, we're going to make a function that searches for the code in a locker map. We're going to use an [code]Either String Code[/code] type to represent our result, because our lookup can fail in two ways &mdash; the locker can be taken, in which case we can't tell the code or the locker number might not exist at all. If the lookup fails, we're just going to use a [code]String[/code] to tell what's happened.





We do a normal lookup in the map. If we get a [code]Nothing[/code], we return a value of type [code]Left String[/code], saying that the locker doesn't exist at all. If we do find it, then we do an additional check to see if the locker is taken. If it is, return a [code]Left[/code] saying that it's already taken. If it isn't, then return a value of type [code]Right Code[/code], in which we give the student the correct code for the locker. It's actually a [code]Right String[/code], but we introduced that type synonym to introduce some additional documentation into the type declaration. Here's an example map:





Now let's try looking up some locker codes.




We could have used a [code]Maybe a[/code] to represent the result but then we wouldn't know why we couldn't get the code. But now, we have information about the failure in our result type.
