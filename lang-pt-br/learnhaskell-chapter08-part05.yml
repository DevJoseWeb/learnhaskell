title: Tipos sinônimos

text:   Anteriormente, mencionamos que quando escrevemos tipos, os tipos [code][Char][/code] e [code]String[/code] são equivalentes e substituíveis. Isso é implementado com <em>tipos sinônimos </em>. Tipos sinônimos na verdade não fazem nada por si só, eles são apenas uma forma de oferecer nomes diferentes para alguns tipos de forma a fazer mais sentido para alguém lendo nosso código e documentação. Aqui está como a biblioteca padrão define [code]String[/code] como um sinônimo para [code][Char][/code].




Nós fomos introduzidos a palavra reservada <i>type</i>. A palavra reservada pode ser confusa pra alguns, pois nós não estamos atualmente fazendo nada de novo (nós fizemos isso com a palavra reservada <i>data</i>), mas nós estamos apenas criando um sinônimo para um tipo que já existente.

Se nós fizermos uma função que converte uma string para caixa alta e chamá-la de [code]toUpperString[/code] ou algum outro nome, nós podemos dar-lhe uma declaração do tipo [code]toUpperString :: [Char] -&gt; [Char][/code] ou [code]toUpperString :: String -&gt; String[/code]. Ambas delas são essencialmente a mesma coisa, com a diferença que a última e mais agradável de ler.

Quando nos estávamos mexendo com o modulo [code]Data.Map[/code], nos primeiro representamos uma agenda como uma lista de associações antes de converte-la em um mapeamento. Como nós já descobrimos, uma lista de associações é uma lista de pares de chaves-valores. Vamos dar uma olhada para agenda que nos tínhamos.




Nos vemos que o tipo de [code]phoneBook[/code] é [code][(String,String)][/code]. Isso nos diz que a uma a lista de associações que mapeia de uma string para outra string, mas não muito mais. Vamos fazer um tipo sinonimo que transmita mais alguma informação na declaração do tipo.




Agora a declaração de tipo para nossa agenda pode ser feita como [code]phoneBook :: PhoneBook[/code]. Vamos fazer também um tipo sinonimo para [code]String[/code].




Dar um tipo sinonimo a [code]String[/code] é algo que um programador de Haskell faz quando eles querem transmitir mais informação sobre como a string pode ser usada em sua função e o que ela representa.

Então agora, quando nos implementarmos uma função que pega um nome e um número e vermos que essa combinação de nome e número está em nossa agenda, nós podemos dar uma declaração muito mais bonita e descritiva sobre o tipo.




Se nos decidirmos não usar tipos sinônimos, nossas funções podem ter um tipo como [code]String -&gt; String -&gt; [(String,String)] -&gt; Bool[/code]. Neste caso, o declaração de tipo que aproveita o uso de tipos sinônimos é mais fácil de entender. Entretanto, você não pode fazer tudo com eles. Nos introduzimos tipos sinônimos ou para descrever o que algum tipo existente representa em nossas funções (e assim nossas declarações de tipos se tornam melhor documentadas) ou quando alguma tipo é grande demais para ser repetido várias vezes (como [code][(String,String)][/code]) mas representa algo mais especifico no contexto das nossas funções.

Tipos sinônimos podem ser parametrizados. Se nós queremos que o um tipo represente uma lista de associação de tipos mas permaneça genérico o suficiente para ser usado com qualquer tipo de chaves e valores, nós podemos fazer isso:




Agora, a função que obtêm o valor de uma chave na lista de associações pode ter o seguinte tipo [code](Eq k) =&gt; k -&gt; AssocList k v -&gt; Maybe v[/code]. O tipo [code]AssocList[/code] é um construtor que pega dois tipos e produz um tipo concreto, como [code]AssocList Int String[/code], por exemplo.

<em>Fonzie disse:</em> Aaay! Quando eu falo sobre <i>tipos concretos</i> Quero dizer, como tipos totalmente aplicados como [code]Map Int String[/code] ou se nós estamos lidando com uma das funções polimórficas, [code][a][/code] ou [code](Ord a) =&gt; Maybe a[/code] e assim por diante. E assim também, as vezes eu e outros dizemos que [code]Maybe[/code] é um tipo, mas não quer dizer, porque cada idiota sabe que [code]Maybe[/code] é um construtor. Quando eu aplico um tipo estra a [code]Maybe[/code], como [code]Maybe String[/code], então eu tenho um tipo concreto. Você sabe, valores podem apenas ter tipos que são tipos concretos! Então como conclusão, viva rápido, ame muito e não deixe ninguém e não deixe ninguém usar o seu favo de mel!

Assim como nós podemos aplicar funções parcialmente para pegar novas funções, nós podemos aplicar parcialmente tipos paramétricos e pegar novos construtores de tipo a partir deles. Assim como nós chamamos uma função com poucos parâmetros e pegamos uma nova função como retorno, nós podemos também especificar um construtor de tipos com poucos parâmetros e pegar de volva um construtor de tipo parcialmente aplicado. Se nós queremos um tipos que represente um mapeamento (de [code]Data.Map[/code]) de inteiros para alguma coisa, nós podemos então fazer isto:




Ou nós podemos fazer algo como isto:




De qualquer maneira, o código do construtor de tipos [code]IntMap[/code] pega um parâmetro e isso é o tipo do que os inteiros apontarem.

<em>Ah sim</em>. Se você está tentar implementar isso, você provavelmente irá fazer uma importação qualificada de [code]Data.Map[/code]. Quando você fazer uma importação qualificada, construtores de tipos também tem de ser precedidos com um nome de modulo. Então você escreveria [code]type IntMap = Map.Map Int[/code].

Tenha certeza que você realmente endente a distinção entre construtores de tipos e construtores de valor.  Make sure that you really understand the distinction between type constructors and value constructors. Só porque nós fizemos um tipo sinonimo chamado [code]IntMap[/code] ou [code]AssocList[/code] não significa que nós podemos fazer coisas como [code]AssocList [(1,2),(4,5),(7,9)][/code]. Tudo isso significa que nós podemos nos referir a esse tipo usando diferentes nomes. Nós podemos fazer [code][(1,2),(3,5),(8,9)] :: AssocList Int Int[/code], que irá fazer os números dentro dela assumir o tipo de [code]Int[/code], mas nós podemos continuar usando  mas ainda podemos usar essa lista como faríamos com qualquer lista normal que tem pares de inteiros dentro. Tipos sinônimos (e tipos geralmente) podem apenas ser usados na porção de tipos de Haskell. Nós estamos na porção de tipos de Haskell sempre que nós definimos novos tipos (assim na declaração de <i>data</i> e <i>type</i>) ou quando nós estamos localizados após um [code]::[/code]. O [code]::[/code] é uma declaração de tipo ou em anotações de tipo.

Outro tipo de dados legal que pega dois tipos como parâmetros é o tipo [code]Either a b[/code]. E assim que ele é mais ou menos definido:




Há dois tipos de construtores. Se for usado [code]Left[/code], então o seu conteúdo é do tipo [code]a[/code] e se for usado [code]Right[/code], então o seu conteúdo é do tipo [code]b[/code]. Então nós podemos usar esse tipo para encapsular o valor de um tipo em outro e então quando temos um valor do tipo [code]Either a b[/code], nos normalmente verificamos o padrão de correspondência de ambos [code]Left[/code] e [code]Right[/code] e nos diferenciamos as coisas com base em qual deles era.





Até agora, nós vimos que [code]Maybe a[/code] foi usado principalmente para representar os resultados de computações que poderiam ter falhado ou não. Mas algumas vezes, [code]Maybe a[/code] não e bom o suficiente porque [code]Nothing[/code] não transmite informação boa o suficiente de que algo falhou. Isso é legal para as funções que podem falhar de forma única ou se nos apenas estamos interessados em como e porque ela falhou. Um [code]Data.Map[/code] falha ao pesquisar apenas se a chave que nos estávamos procurando não estava no mapa, então nós sabemos exatamente o que aconteceu. Entretanto, quando nós estamos interessados em como alguma função falhou e porque, nos comumente usamos o resultado do tipo [code]Either a b[/code], onde [code]a[/code] e alguma espécie de tipo que pode nos dizer algo sobre um possível erro e [code]b[/code] é o tipo de uma computação realizada com sucesso. Portanto, erros usam o construtor de valor [code]Left[/code] enquanto os resultados usam [code]Right[/code].

Um exemplo: uma escolar de ensino médio tem armários para que os estudantes tenham algum lugar para pôr os seus pôsteres de Guns'n'Roses. Cada armário tem uma combinação de código. Quando um estudante quer um novo armário, ele irá falar com o supervisor dos armários com o número do armário que ele quer e então o supervisor lhe dará um código. Entretanto, se alguém já estiver usando o armário, ele não pode dizer o código para o armário e terá de pegar um diferente. Nós iremos usar um mapa a partir de [code]Data.Map[/code] para representar os armários. Ele vai mapear a partir dos números dos armários para um par de armários que estão em uso ou não e os códigos dos armários.





Coisa simples. Nós introduzimos um novo tipo de dados para representar se um armário está ocupado ou livre e nós criamos um topo sinônimo para o código do armário. Nós também criamos um tipo sinônimo para o tipo de mapa de inteiros para um par de estados de armários e seus códigos. E agora, nós iremos criar uma função que busca por um código de um armário no mapeamento. Nós estamos usando um tipo [code]Either String Code[/code] para representar o nosso resultado, pois nossa busca pode falhar de duas formas &mdash; o armário pode estar ocupado, neste caso nós não podemos dizer o código ou o número do armário pode nunca ter existido. Se a busca falha, nós iremos usar uma [code]String[/code] que nos dirá o que aconteceu.





Nós fazemos uma busca normal no mapa. Se nós pegamos um [code]Nothing[/code], nos retornamos um valor do tipo [code]Left String[/code], dizendo que o armário não existe. Se nós encontramos isso, então nos fazer uma checagem adicional para ver se o armário já está ocupado. Se ele está, retornamos um [code]Left[/code] dizendo que ele já está ocupado. Se ele não está, então nós retornamos um valor do tipo [code]Right Code[/code], onde nós damos ao estudante o código correto para o armário. Atualmente isto é um [code]Right String[/code], mas nós introduzimos que tipos sinônimos foram introduzidos como uma documentação adicional dentro da declaração de tipo. Aqui está um exemplo de mapeamento:





Agora vamos tentar buscar alguns códigos de armários.




Nós podemos ter usado um [code]Maybe a[/code] para representar o resultado, mas nós não podemos saber porque nós não podemos pegar o código. Mas agora, nós temos informação sobre a falha no nosso tipo de resultado.
