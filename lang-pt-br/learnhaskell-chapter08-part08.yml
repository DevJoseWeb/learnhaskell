title: A yes-no typeclass

text: In JavaScript and some other weakly typed languages, you can put almost anything inside an if expression. For example, you can do all of the following: [code]if (0) alert("YEAH!") else alert("NO!")[/code], [code]if ("") alert ("YEAH!") else alert("NO!")[/code], [code]if (false) alert("YEAH") else alert("NO!)[/code], etc. and all of these will throw an alert of [code]NO![/code]. If you do [code]if ("WHAT") alert ("YEAH") else alert("NO!")[/code], it will alert a [code]"YEAH!"[/code] because JavaScript considers non-empty strings to be a sort of true-ish value.

Even though strictly using [code]Bool[/code] for boolean semantics works better in Haskell, let's try and implement that JavaScript-ish behavior anyway. For fun! Let's start out with a <i>class</i> declaration.




Pretty simple. The [code]YesNo[/code] typeclass defines one function. That function takes one value of a type that can be considered to hold some concept of true-ness and tells us for sure if it's true or not. Notice that from the way we use the [code]a[/code] in the function, [code]a[/code] has to be a concrete type.

Next up, let's define some instances. For numbers, we'll assume that (like in JavaScript) any number that isn't 0 is true-ish and 0 is false-ish.




Empty lists (and by extensions, strings) are a no-ish value, while non-empty lists are a yes-ish value.




Notice how we just put in a type parameter [code]a[/code] in there to make the list a concrete type, even though we don't make any assumptions about the type that's contained in the list. What else, hmm ... I know, [code]Bool[/code] itself also holds true-ness and false-ness and it's pretty obvious which is which.

Huh? What's [code]id[/code]? It's just a standard library function that takes a parameter and returns the same thing, which is what we would be writing here anyway.

Let's make [code]Maybe a[/code] an instance too.




We didn't need a class constraint because we made no assumptions about the contents of the [code]Maybe[/code]. We just said that it's true-ish if it's a [code]Just[/code] value and false-ish if it's a [code]Nothing[/code]. We still had to write out [code](Maybe a)[/code] instead of just [code]Maybe[/code] because if you think about it, a [code]Maybe -&gt; Bool[/code] function can't exist (because [code]Maybe[/code] isn't a concrete type), whereas a [code]Maybe a -&gt; Bool[/code] is fine and dandy. Still, this is really cool because now, any type of the form [code]Maybe something[/code] is part of [code]YesNo[/code] and it doesn't matter what that [code]something[/code] is.

Previously, we defined a [code]Tree a[/code] type, that represented a binary search tree. We can say an empty tree is false-ish and anything that's not an empty tree is true-ish.




Can a traffic light be a yes or no value? Sure. If it's red, you stop. If it's green, you go. If it's yellow? Eh, I usually run the yellows because I live for adrenaline.




Cool, now that we have some instances, let's go play!




Right, it works! Let's make a function that mimics the if statement, but it works with [code]YesNo[/code] values.



Pretty straightforward. It takes a yes-no-ish value and two things. If the yes-no-ish value is more of a yes, it returns the first of the two things, otherwise it returns the second of them.
