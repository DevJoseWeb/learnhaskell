title: Function composition

text: In mathematics, function composition is defined like this: [image " (f . g)(x) = f(g(x))"], meaning that composing two functions produces a new function that, when called with a parameter, say, <i>x</i> is the equivalent of calling <i>g</i> with the parameter <i>x</i> and then calling the <i>f</i> with that result.

In Haskell, function composition is pretty much the same thing. We do function composition with the [code].[/code] function, which is defined like so:



Mind the type declaration. [code]f[/code] must take as its parameter a value that has the same type as [code]g[/code]'s return value. So the resulting function takes a parameter of the same type that [code]g[/code] takes and returns a value of the same type that [code]f[/code] returns. The expression [code]negate . (* 3)[/code] returns a function that takes a number, multiplies it by 3 and then negates it.

One of the uses for function composition is making functions on the fly to pass to other functions. Sure, can use lambdas for that, but many times, function composition is clearer and more concise. Say we have a list of numbers and we want to turn them all into negative numbers. One way to do that would be to get each number's absolute value and then negate it, like so:



Notice the lambda and how it looks like the result function composition. Using function composition, we can rewrite that as:



Fabulous! Function composition is right-associative, so we can compose many functions at a time. The expression [code]f (g (z x))[/code] is equivalent to [code](f . g . z) x[/code]. With that in mind, we can turn



into



But what about functions that take several parameters? Well, if we want to use them in function composition, we usually have to partially apply them just so much that each function takes just one parameter. [code] sum (replicate 5 (max 6.7 8.9))[/code] can be rewritten as [code](sum . replicate 5 . max 6.7) 8.9[/code] or as [code]sum . replicate 5 . max 6.7 $ 8.9[/code]. What goes on in here is this: a function that takes what [code]max 6.7[/code] takes and applies [code]replicate 5[/code] to it is created. Then, a function that takes the result of that and does a sum of it is created. Finally, that function is called with [code]8.9[/code]. But normally, you just read that as: apply [code]8.9[/code] to [code]max 6.7[/code], then apply [code]replicate 5[/code] to that and then apply [code]sum[/code] to that. If you want to rewrite an expression with a lot of parentheses by using function composition, you can start by putting the last parameter of the innermost function after a [code]$[/code] and then just composing all the other function calls, writing them without their last parameter and putting dots between them. If you have [code]replicate 100 (product (map (*3) (zipWith max [1,2,3,4,5] [4,5,6,7,8])))[/code], you can write it as [code]replicate 100 . product . map (*3) . zipWith max [1,2,3,4,5] $ [4,5,6,7,8][/code]. If the expression ends with three parentheses, chances are that if you translate it into function composition, it'll have three composition operators.

Another common use of function composition is defining functions in the so-called point free style (also called the point<i>less</i> style). Take for example this function that we wrote earlier:




The [code]xs[/code] is exposed on both right sides. Because of currying, we can omit the [code]xs[/code] on both sides, because calling [code]foldl (+) 0[/code] creates a function that takes a list. Writing the function as [code]sum' = foldl (+) 0[/code] is called writing it in point free style. How would we write this in point free style?




We can't just get rid of the [code]x[/code] on both right right sides. The [code]x[/code] in the function body has parentheses after it. [code]cos (max 50)[/code] wouldn't make sense. You can't get the cosine of a function. What we can do is express [code]fn[/code] as a composition of functions.



Excellent! Many times, a point free style is more readable and concise, because it makes you think about functions and what kind of functions composing them results in instead of thinking about data and how it's shuffled around. You can take simple functions and use composition as glue to form more complex functions. However, many times, writing a function in point free style can be less readable if a function is too complex. That's why making long chains of function composition is discouraged, although I plead guilty of sometimes being too composition-happy. The prefered style is to use <i>let</i> bindings to give labels to intermediary results or split the problem into sub-problems and then put it together so that the function makes sense to someone reading it instead of just making a huge composition chain.

In the section about maps and filters, we solved a problem of finding the sum of all odd squares that are smaller than 10.000. Here's what the solution looks like when put into a function.



Being such a fan of function composition, I would have probably written that like this:



However, if there was a chance of someone else reading that code, I would have written it like this:




It wouldn't win any code golf competition, but someone reading the function will probably find it easier to read than a composition chain.

