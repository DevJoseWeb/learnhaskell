chapter: Come√ßando

title: Preparar, apontar, foi!

text: Alright, let's get started! If you're the sort of horrible person who doesn't read introductions to things and you skipped it, you might want to read the last section in the introduction anyway because it explains what you need to follow this tutorial and how we're going to load functions. The first thing we're going to do is run ghc's interactive mode and call some function to get a very basic feel for haskell. Open your terminal and type in [code]ghci[/code]. You will be greeted with something like this.

Congratulations, you're in GHCI! The prompt here is [code]Prelude&gt;[/code] but because it can get longer when you load stuff into the session, we're going to use [code]ghci&gt;[/code]. If you want to have the same prompt, just type in [code]:set prompt "ghci&gt; "[/code]. 

Here's some simple arithmetic.

This is pretty self-explanatory. We can also use several operators on one line and all the usual precedence rules are obeyed. We can use parentheses to make the precedence explicit or to change it.

Pretty cool, huh? Yeah, I know it's not but bear with me. A little pitfall to watch out for here is negating numbers. If we want to have a negative number, it's always best to surround it with parentheses. Doing [code]5 * -3[/code] will make GHCI yell at you but doing [code]5 * (-3)[/code] will work just fine.

Boolean algebra is also pretty straightforward. As you probably know, [code]&amp;&amp;[/code] means a boolean and, [code]||[/code] means a boolean or. [code]not[/code] negates a [code]True[/code] or a [code]False[/code].

Testing for equality is done like so.

What about doing [code]5 + "llama"[/code] or [code]5 == True[/code]? Well, if we try the first snippet, we get a big scary error message!

Yikes! What GHCI is telling us here is that [code]"llama"[/code] is not a number and so it doesn't know how to add it to 5. Even if it wasn't [code]"llama"[/code] but [code]"four"[/code] or [code]"4"[/code], Haskell still wouldn't consider it to be a number. [code]+[/code] expects its left and right side to be numbers. If we tried to do [code]True == 5[/code], GHCI would tell us that the types don't match. Whereas [code]+[/code] works only on things that are considered numbers, [code]==[/code] works on any two things that can be compared. But the catch is that they both have to be the same type of thing. You can't compare apples and oranges. We'll take a closer look at types a bit later. Note: you can do [code]5 + 4.0[/code] because [code]5[/code] is sneaky and can act like an integer or a floating-point number. [code]4.0[/code] can't act like an integer, so [code]5[/code] is the one that has to adapt.

You may not have known it but we've been using functions now all along. For instance, [code]*[/code] is a function that takes two numbers and multiplies them. As you've seen, we call it by sandwiching it between them. This is what we call an <i>infix</i> function. Most functions that aren't used with numbers are <i>prefix</i> functions. Let's take a look at them. 


Functions are usually prefix so from now on we won't explicitly state that a function is of the prefix form, we'll just assume it. In most imperative languages functions are called by writing the function name and then writing its parameters in parentheses, usually separated by commas. In Haskell, functions are called by writing the function name, a space and then the parameters, separated by spaces. For a start, we'll try calling one of the most boring functions in Haskell.


The [code]succ[/code] function takes anything that has a defined successor and returns that successor. As you can see, we just separate the function name from the parameter with a space. Calling a function with several parameters is also simple. The functions [code]min[/code] and [code]max[/code] take two things that can be put in an order (like numbers!) and return the one that's greater.

Function application (calling a function by putting a space after it and then typing out the parameters) has the highest precedence of them all. What that means for us is that these two statements are equivalent.


However, if we wanted to get the successor of the product of numbers 9 and 10, we couldn't write [code]succ 9 * 10[/code] because that would get the successor of 9, which would then be multiplied by 10. So 100. We'd have to write [code]succ (9 * 10)[/code] to get 91.

If a function takes two parameters, we can also call it as an infix function by surrounding it with backticks. For instance, the [code]div[/code] function takes two integers and does integral division between them. Doing [code]div 92 10[/code] results in a 9. But when we call it like that, there may be some confusion as to which number is doing the division and which one is being divided. So we can call it as an infix function by doing [code]92 `div` 10[/code] and suddenly it's much clearer. 

Lots of people who come from imperative languages tend to stick to the notion that parentheses should denote function application. For example, in C, you use parentheses to call functions like [code]foo()[/code], [code]bar(1)[/code] or [code]baz(3, "haha")[/code]. Like we said, spaces are used for function application in Haskell. So those functions in Haskell would be [code]foo[/code], [code]bar 1[/code] and [code]baz 3 "haha"[/code]. So if you see something like [code]bar (bar 3)[/code], it doesn't mean that [code]bar[/code] is called with [code]bar[/code] and [code]3[/code] as parameters. It means that we first call the function [code]bar[/code] with [code]3[/code] as the parameter to get some number and then we call [code]bar[/code] again with that number. In C, that would be something like [code]bar(bar(3))[/code].
