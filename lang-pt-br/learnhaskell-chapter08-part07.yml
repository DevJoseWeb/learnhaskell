title: Typeclasses 102

text: So far, we've learned about some of the standard Haskell typeclasses and we've seen which types are in them. We've also learned how to automatically make our own types instances of the standard typeclasses by asking Haskell to derive the instances for us. In this section, we're going to learn how to make our own typeclasses and how to make types instances of them by hand.

A quick recap on typeclasses: typeclasses are like interfaces. A typeclass defines some behavior (like comparing for equality, comparing for ordering, enumeration) and then types that can behave in that way are made instances of that typeclass. The behavior of typeclasses is achieved by defining functions or just type declarations that we then implement. So when we say that a type is an instance of a typeclass, we mean that we can use the functions that the typeclass defines with that type.

Typeclasses have pretty much nothing to do with classes in languages like Java or Python. This confuses many people, so I want you to forget everything you know about classes in imperative languages right now.

For example, the [code]Eq[/code] typeclass is for stuff that can be equated. It defines the functions [code]==[/code] and [code]/=[/code]. If we have a type (say, [code]Car[/code]) and comparing two cars with the equality function [code]==[/code] makes sense, then it makes sense for [code]Car[/code] to be an instance of [code]Eq[/code].

This is how the [code]Eq[/code] class is defined in the standard prelude:



Woah, woah, woah! Some new strange syntax and keywords there! Don't worry, this will all be clear in a second. First off, when we write [code]class Eq a where[/code], this means that we're defining a new typeclass and that's called [code]Eq[/code]. The [code]a[/code] is the type variable and it means that [code]a[/code] will play the role of the type that we will soon be making an instance of [code]Eq[/code]. It doesn't have to be called [code]a[/code], it doesn't even have to be one letter, it just has to be a lowercase word. Then, we define several functions. It's not mandatory to implement the function bodies themselves, we just have to specify the type declarations for the functions.

Some people might understand this better if we wrote [code]class Eq equatable where[/code] and then specified the type declarations like [code](==) :: equatable -&gt; equatable -&gt; Bool[/code].

Anyway, we <i>did</i> implement the function bodies for the functions that [code]Eq[/code] defines, only we defined them in terms of mutual recursion. We said that two instances of [code]Eq[/code] are equal if they are not different and they are different if they are not equal. We didn't have to do this, really, but we did and we'll see how this helps us soon.

If we have say [code]class Eq a where[/code] and then define a type declaration within that class like [code](==) :: a -&gt; -a -&gt; Bool[/code], then when we examine the type of that function later on, it will have the type of [code](Eq a) =&gt; a -&gt; a -&gt; Bool[/code].

So once we have a class, what can we do with it? Well, not much, really. But once we start making types instances of that class, we start getting some nice functionality. So check out this type:




It defines the states of a traffic light. Notice how we didn't derive any class instances for it. That's because we're going to write up some instances by hand, even though we could derive them for types like [code]Eq[/code] and [code]Show[/code]. Here's how we make it an instance of [code]Eq[/code].



We did it by using the <i>instance</i> keyword. So <i>class</i> is for defining new typeclasses and <i>instance</i> is for making our types instances of typeclasses. When we were defining [code]Eq[/code], we wrote [code]class Eq a where[/code] and we said that [code]a[/code] plays the role of whichever type will be made an instance later on. We can see that clearly here, because when we're making an instance, we write [code]instance Eq TrafficLight where[/code]. We replace the [code]a[/code] with the actual type.

Because [code]==[/code] was defined in terms of [code]/=[/code] and vice versa in the <i>class</i> declaration, we only had to overwrite one of them in the instance declaration. That's called the minimal complete definition for the typeclass &mdash; the minimum of functions that we have to implement so that our type can behave like the class advertises. To fulfill the minimal complete definition for [code]Eq[/code], we have to overwrite either one of [code]==[/code] or [code]/=[/code]. If [code]Eq[/code] was defined simply like this:




we'd have to implement both of these functions when making a type an instance of it, because Haskell wouldn't know how these two functions are related. The minimal complete definition would then be: both [code]==[/code] and [code]/=[/code].

You can see that we implemented [code]==[/code] simply by doing pattern matching. Since there are many more cases where two lights aren't equal, we specified the ones that are equal and then just did a catch-all pattern saying that if it's none of the previous combinations, then two lights aren't equal.

Let's make this an instance of [code]Show[/code] by hand, too. To satisfy the minimal complete definition for [code]Show[/code], we just have to implement its [code]show[/code] function, which takes a value and turns it into a string.




Once again, we used pattern matching to achieve our goals. Let's see how it works in action:




Nice. We could have just derived [code]Eq[/code] and it would have had the same effect (but we didn't for educational purposes). However, deriving [code]Show[/code] would have just directly translated the value constructors to strings. But if we want lights to appear like [code]"Red light"[/code], then we have to make the instance declaration by hand.

You can also make typeclasses that are subclasses of other typeclasses. The <i>class</i> declaration for [code]Num[/code] is a bit long, but here's the first part:




As we mentioned previously, there are a lot of places where we can cram in class constraints. So this is just like writing [code]class Num a where[/code], only we state that our type [code]a[/code] must be an instance of [code]Eq[/code]. We're essentially saying that we have to make a type an instance of [code]Eq[/code] before we can make it an instance of [code]Num[/code]. Before some type can be considered a number, it makes sense that we can determine whether values of that type can be equated or not. That's all there is to subclassing really, it's just a class constraint on a <i>class</i> declaration! When defining function bodies in the <i>class</i> declaration or when defining them in <i>instance</i> declarations, we can assume that [code]a[/code] is a part of [code]Eq[/code] and so we can use [code]==[/code] on values of that type.

But how are the [code]Maybe[/code] or list types made as instances of typeclasses? What makes [code]Maybe[/code] different from, say, [code]TrafficLight[/code] is that [code]Maybe[/code] in itself isn't a concrete type, it's a type constructor that takes one type parameter (like [code]Char[/code] or something) to produce a concrete type (like [code]Maybe Char[/code]). Let's take a look at the [code]Eq[/code] typeclass again:




From the type declarations, we see that the [code]a[/code] is used as a concrete type because all the types in functions have to be concrete (remember, you can't have a function of the type [code]a -&gt; Maybe[/code] but you can have a function of [code]a -&gt; Maybe a[/code] or [code]Maybe Int -&gt; Maybe String[/code]). That's why we can't do something like






Because like we've seen, the [code]a[/code] has to be a concrete type but [code]Maybe[/code] isn't a concrete type. It's a type constructor that takes one parameter and then produces a concrete type. It would also be tedious to write [code]instance Eq (Maybe Int) where[/code], [code]instance Eq (Maybe Char) where[/code], etc. for every type ever. So we could write it out like so:




This is like saying that we want to make all types of the form [code]Maybe something[/code] an instance of [code]Eq[/code]. We actually could have written [code](Maybe something)[/code], but we usually opt for single letters to be true to the Haskell style. The [code](Maybe m)[/code] here plays the role of the [code]a[/code] from [code]class Eq a where[/code]. While [code]Maybe[/code] isn't a concrete type, [code]Maybe m[/code] is. By specifying a type parameter ([code]m[/code], which is in lowercase), we said that we want all types that are in the form of [code]Maybe m[/code], where [code]m[/code] is any type, to be an instance of [code]Eq[/code].

There's one problem with this though. Can you spot it? We use [code]==[/code] on the contents of the [code]Maybe[/code] but we have no assurance that what the [code]Maybe[/code] contains can be used with [code]Eq[/code]! That's why we have to modify our <i>instance</i> declaration like this:




We had to add a class constraint! With this <i>instance</i> declaration, we say this: we want all types of the form [code]Maybe m[/code] to be part of the [code]Eq[/code] typeclass, but only those types where the [code]m[/code] (so what's contained inside the [code]Maybe[/code]) is also a part of [code]Eq[/code]. This is actually how Haskell would derive the instance too.

Most of the times, class constraints in <i>class</i> declarations are used for making a typeclass a subclass of another typeclass and class constraints in <i>instance</i> declarations are used to express requirements about the contents of some type. For instance, here we required the contents of the [code]Maybe[/code] to also be part of the [code]Eq[/code] typeclass.

When making instances, if you see that a type is used as a concrete type in the type declarations (like the [code]a[/code] in [code]a -&gt; a -&gt; Bool[/code]), you have to supply type parameters and add parentheses so that you end up with a concrete type.

Take into account that the type you're trying to make an instance of will replace the parameter in the <i>class</i> declaration. The [code]a[/code] from [code]class Eq a where[/code] will be replaced with a real type when you make an instance, so try mentally putting your type into the function type declarations as well. [code](==) :: Maybe -&gt; Maybe -&gt; Bool[/code] doesn't make much sense but [code](==) :: (Eq m) =&gt; Maybe m -&gt; Maybe m -&gt; Bool[/code] does. But this is just something to think about, because [code]==[/code] will always have a type of [code](==) :: (Eq a) =&gt; a -&gt; a -&gt; Bool[/code], no matter what instances we make.

Ooh, one more thing, check this out! If you want to see what the instances of a typeclass are, just do [code]:info YourTypeClass[/code] in GHCI. So typing [code]:info Num[/code] will show which functions the typeclass defines and it will give you a list of the types in the typeclass. [code]:info[/code] works for types and type constructors too. If you do [code]:info Maybe[/code], it will show you all the typeclasses that [code]Maybe[/code] is an instance of. Also [code]:info[/code] can show you the type declaration of a function. I think that's pretty cool.
