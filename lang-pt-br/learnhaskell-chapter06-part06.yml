title: Function application with $

text: Alright, next up, we'll take a look at the [code]$[/code] function, also called <i>function application</i>. First of all, let's check out how it's defined:



What the heck? What is this useless operator? It's just function application! Well, almost, but not quite! Whereas normal function application (putting a space between two things) has a really high precedence, the [code]$[/code] function has the lowest precedence. Function application with a space is left-associative (so [code]f a b c[/code] is the same as [code]((f a) b) c)[/code]), function application with [code]$[/code] is right-associative.

That's all very well, but how does this help us? Most of the time, it's a convenience function so that we don't have to write so many parentheses. Consider the expression [code]sum (map sqrt [1..130])[/code]. Because [code]$[/code] has such a low precedence, we can rewrite that expression as [code]sum $ map sqrt [1..130][/code], saving ourselves precious keystrokes! When a [code]$[/code] is encountered, the expression on its right is applied as the parameter to the function on its left. How about [code]sqrt 3 + 4 + 9[/code]? This adds together 9, 4 and the square root of 3. If we want get the square root of <i>3 + 4 + 9</i>, we'd have to write [code]sqrt (3 + 4 + 9)[/code] or if we use [code]$[/code] we can write it as [code]sqrt $ 3 + 4 + 9[/code] because [code]$[/code] has the lowest precedence of any operator. That's why you can imagine a [code]$[/code] being sort of the equivalent of writing an opening parentheses and then writing a closing one on the far right side of the expression.

How about [code]sum (filter (&gt; 10) (map (*2) [2..10]))[/code]? Well, because [code]$[/code] is right-associative, [code]f (g (z x))[/code] is equal to [code]f $ g $ z x[/code]. And so, we can rewrite [code]sum (filter (&gt; 10) (map (*2) [2..10]))[/code] as [code]sum $ filter (&gt; 10) $ map (*2) [2..10][/code].

But apart from getting rid of parentheses, [code]$[/code] means that function application can be treated just like another function. That way, we can, for instance, map function application over a list of functions.
