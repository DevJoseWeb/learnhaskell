title: Data.Char

text: The [code]Data.Char[/code] module does what its name suggests. It exports functions that deal with characters. It's also helpful when filtering and mapping over strings because they're just lists of characters.

[code]Data.Char[/code] exports a bunch of predicates over characters. That is, functions that take a character and tell us whether some assumption about it is true or false. Here's what they are:

[function]isControl[/function] checks whether a character is a control character.

[function]isSpace[/function] checks whether a character is a white-space characters. That includes spaces, tab characters, newlines, etc.

[function]isLower[/function] checks whether a character is lower-cased.

[function]isUpper[/function] checks whether a character is upper-cased.

[function]isAlpha[/function] checks whether a character is a letter.

[function]isAlphaNum[/function] checks whether a character is a letter or a number.

[function]isPrint[/function] checks whether a character is printable. Control characters, for instance, are not printable.

[function]isDigit[/function] checks whether a character is a digit.

[function]isOctDigit[/function] checks whether a character is an octal digit.

[function]isHexDigit[/function] checks whether a character is a hex dibit.

[function]isLetter[/function] checks whether a character is a letter.

[function]isMark[/function] checks for Unicode mark characters. Those are characters that combine with preceding letters to form latters with accents. Use this if you are French.

[function]isNumber[/function] checks whether a character is numeric.

[function]isPunctuation[/function] checks whether a character is punctuation.

[function]isSymbol[/function] checks whether a character is a fancy mathematical or currency symbol.

[function]isSeparator[/function] checks for Unicode spaces and separators.

[function]isAscii[/function] checks whether a character falls into the first 128 characters of the Unicode character set.

[function]isLatin1[/function] checks whether a character falls into the first 256 characters of Unicode.

[function]isAsciiUpper[/function] checks whether a character is ASCII and upper-case.

[function]isAsciiLower[/function] checks whether a character is ASCII and lower-case.

All these predicates have a type signature of [code]Char -&gt; Bool[/code]. Most of the time you'll use this to filter out strings or something like that. For instance, let's say we're making an program that takes a username and the username can only be comprised of alphanumeric characters. We can use the [code]Data.List[/code] function [code]all[/code] in combination with the [code]Data.Char[/code] predicates to determine if the username is alright.




Kewl. In case you don't remember, [code]all[/code] takes a predicate and a list and returns [code]True[/code] only if that predicate holds for every element in the list.

We can also use [code]isSpace[/code] to simulate the [code]Data.List[/code] function [code]words[/code].




Hmmm, well, it kind of does what [code]words[/code] does but we're left with elements of only spaces. Hmm, whatever shall we do? I know, let's filter that sucker.



Ah.
The [code]Data.Char[/code] also exports a datatype that's kind of like [code]Ordering[/code]. The [code]Ordering[/code] type can have a value of [code]LT[/code], [code]EQ[/code] or [code]GT[/code]. It's a sort of enumeration. It describes a few possible results that can arise from comparing two elements. The [code]GeneralCategory[/code] type is also an enumeration. It presents us with a few possible categories that a character can fall into. The main function for getting the general category of a character is [code]generalCategory[/code]. It has a type of [code]generalCategory :: Char -&gt; GeneralCategory[/code]. There are about 31 categories so we won't list them all here, but let's play around with the function.




Since the [code]GeneralCategory[/code] type is part of the [code]Eq[/code] typeclass, we can also test for stuff like [code]generalCategory c == Space[/code].

[function]toUpper[/function] converts a character to upper-case. Spaces, numbers, and the like remain unchanged.

[function]toLower[/function] converts a character to lower-case.

[function]toTitle[/function] converts a character to title-case. For most characters, title-case is the same as upper-case.

[function]digitToInt[/function] converts a character to an [code]Int[/code]. To succeed, the character must be in the ranges [code]'0'..'9'[/code], [code]'a'..'f'[/code] or [code]'A'..'F'[/code].




[function]intToDigit[/function] is the inverse function of [code]digitToInt[/code]. It takes an [code]Int[/code] in the range of [code]0..15[/code] and converts it to a lower-case character.




The [function]ord[/function] and [code]chr[/code] functions convert characters to their corresponding numbers and vice versa:





The difference between the [code]ord[/code] values of two characters is equal to how far apart they are in the Unicode table.
The Caesar cipher is a primitive method of encoding messages by shifting each character in them by a fixed number of positions in the alphabet. We can easily create a sort of Caesar cipher of our own, only we won't constrict ourselves to the alphabet.




Here, we first convert the string to a list of numbers. Then we add the shift amount to each number before converting the list of numbers back to characters. If you're a composition cowboy, you could write the body of this function as [code]map (chr . (+ shift) . ord) msg[/code]. Let's try encoding a few messages.




That's encoded alright. Decoding a message is basically just shifting it back by the number of places it was shifted by in the first place.
