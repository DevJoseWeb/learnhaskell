title:O que eu preciso para embarcar nessa
text: A text editor and a Haskell compiler. You probably already have your favorite text editor installed so we won't waste time on that. The two main Haskell compilers as of right now are GHC (Glasgow Haskell Compiler) and Hugs. For the purposes of this tutorial we'll be using GHC. I won't cover much installation details. On Windows it's just a matter of downloading the installer and clicking "Next" a couple of times and then rebooting your computer. On Debian based Linux distributions you can just do [code]apt-get install ghc6 libghc6-mtl-dev[/code] and you're laughing. I don't have a Mac but I've heard that if you have MacPorts, you can get GHC by doing [code]sudo port install ghc[/code]. Also, I think you can do Haskell development with that wacky mouse with one button, although I'm not sure.

GHC can take a Haskell script (they usually have a .hs extension) and compile it but it also has an interactive mode which allows you to interactively interact with scripts. Interactively. You can call functions from scripts that you load and the results are displayed immediately. For learning it's a lot easier and faster than compiling every time you make a change and then running the program from the prompt. The interactive mode is invoked by typing in <span class="fixed">ghci</span> at your prompt. If you have defined some functions in a file called, say, [code]myfunctions.hs[/code], you load up those functions by typing in [code]:l myfunctions[/code] and then you can play with them, provided [code]myfunctions.hs[/code] is in the same folder from which [code]ghci[/code] was invoked. If you change the .hs script, just run [code]:l myfunctions[/code] again or do [code]:r[/code], which is equivalent because it reloads the current script. The usual workflow for me when playing around in stuff is defining some functions in a .hs file, loading it up and messing around with them and then changing the .hs file, loading it up again and so on. This is also what we'll be doing here.
