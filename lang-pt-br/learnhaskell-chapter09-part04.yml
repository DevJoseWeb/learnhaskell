title: Randomness

text: Many times while programming, you need to get some random data. Maybe you're making a game where a dice needs to be thrown or you need to generate some test data to test out your program. There are a lot of uses for random data when programming. Well, actually, pseudo-random, because we all know that the only true source of randomness is a monkey on a unicycle with a cheese in one hand and its butt in the other. In this section, we'll take a look at how to make Haskell generate seemingly random data.

In most other programming languages, you have functions that give you back some random number. Each time you call that function, you get back a (hopefully) different random number. How about Haskell? Well, remember, Haskell is a pure functional language. What that means is that it has referential transparency. What THAT means is that a function, if given the same parameters twice, must produce the same result twice. That's really cool because it allows us to reason differently about programs and it enables us to defer evaluation until we really need it. If I call a function, I can be sure that it won't do any funny stuff before giving me the results. All that matters are its results. However, this makes it a bit tricky for getting random numbers. If I have a function like this:




It's not very useful as a random number function because it will always return <span class="fixed">4</span>, even though I can assure you that the 4 is completely random, because I used a dice to determine it.

How do other languages make seemingly random numbers? Well, they take various info from your computer, like the current time, how much and where you moved your mouse and what kind of noises you made behind your computer and based on that, give a number that looks really random. The combination of those factors (that randomness) is probably different in any given moment in time, so you get a different random number.

Ah. So in Haskell, we can make a random number then if we make a function that takes as its parameter that randomness and based on that returns some number (or other data type).

Enter the <span class="fixed">System.Random</span> module. It has all the functions that satisfy our need for randomness. Let's just dive into one of the functions it exports then, namely <span class="label function">random</span>. Here's its type: <span class="fixed">random :: (RandomGen g, Random a) =&gt; g -&gt; (a, g)</span>. Whoa! Some new typeclasses in this type declaration up in here! The <span class="label class">RandomGen</span> typeclass is for types that can act as sources of randomness. The <span class="label class">Random</span> typeclass is for things that can take on random values. A boolean value can take on a random value, namely <span class="fixed">True</span> or <span class="fixed">False</span>. A number can also take up a plethora of different random values. Can a function take on a random value? I don't think so, probably not! If we try to translate the type declaration of <span class="fixed">random</span> to English, we get something like: it takes a random generator (that's our source of randomness) and returns a random value and a new random generator. Why does it also return a new generator as well as a random value? Well, we'll see in a moment.

To use our <span class="fixed">random</span> function, we have to get our hands on one of those random generators. The <span class="fixed">System.Random</span> module exports a cool type, namely <span class="label type">StdGen</span> that is an instance of the <span class="fixed">RandomGen</span> typeclass. We can either make a <span class="fixed">StdGen</span> manually or we can tell the system to give us one based on a multitude of sort of random stuff.

To manually make a random generator, use the <span class="label function">mkStdGen</span> function. It has a type of <span class="fixed">mkStdGen :: Int -&gt; StdGen</span>. It takes an integer and based on that, gives us a random generator. Okay then, let's try using <span class="fixed">random</span> and <span class="fixed">mkStdGen</span> in tandem to get a (hardly random) number.





What's this? Ah, right, the <span class="fixed">random</span> function can return a value of any type that's part of the <span class="fixed">Random</span> typeclass, so we have to inform Haskell what kind of type we want. Also let's not forget that it returns a random value and a random generator in a pair.





Finally! A number that looks kind of random! The first component of the tuple is our number whereas the second component is a textual representation of our new random generator. What happens if we call <span class="fixed">random</span> with the same random generator again?




Of course. The same result for the same parameters. So let's try giving it a different random generator as a parameter.




Alright, cool, great, a different number. We can use the type annotation to get different types back from that function.




Let's make a function that simulates tossing a coin three times. If <span class="fixed">random</span> didn't return a new generator along with a random value, we'd have to make this function take three random generators as a parameter and then return coin tosses for each of them. But that sounds wrong because if one generator can make a random value of type <span class="fixed">Int</span> (which can take on a load of different values), it should be able to make three coin tosses (which can take on precisely eight combinations). So this is where <span class="fixed">random</span> returning a new generator along with a value really comes in handy.

We'll represent a coin with a simple <span class="fixed">Bool</span>. <span class="fixed">True</span> is tails, <span class="fixed">False</span> is heads.






We call <span class="fixed">random</span> with the generator we got as a parameter to get a coin and a new generator. Then we call it again, only this time with our new generator, to get the second coin. We do the same for the third coin. Had we called it with the same generator every time, all the coins would have had the same value and we'd only be able to get <span class="fixed">(False, False, False)</span> or <span class="fixed">(True, True, True)</span> as a result.





Notice that we didn't have to do <span class="fixed">random gen :: (Bool, StdGen)</span>. That's because we already specified that we want booleans in the type declaration of the function. That's why Haskell can infer that we want a boolean value in this case.

So what if we want to flip four coins? Or five? Well, there's a function called <span class="label function">randoms</span> that takes a generator and returns an infinite sequence of values based on that generator.





Why doesn't <span class="fixed">randoms</span> return a new generator as well as a list? We could implement the <span class="fixed">randoms</span> function very easily like this:







A recursive definition. We get a random value and a new generator from the current generator and then make a list that has the value as its head and random numbers based on the new generator as its tail. Because we have to be able to potentially generate an infinite amount of numbers, we can't give the new random generator back.

We could make a function that generates a finite stream of numbers and a new generator like this:





Again, a recursive definition. We say that if we want 0 numbers, we just return an empty list and the generator that was given to us. For any other number of random values, we first get one random number and a new generator. That will be the head. Then we say that the tail will be <i>n - 1</i> numbers generated with the new generator. Then we return the head and the rest of the list joined and the final generator that we got from getting the <i>n - 1</i> random numbers.

What if we want a random value in some sort of range? All the random integers so far were outrageously big or small. What if we want to to throw a dice? Well, we use <span class="label function">randomR</span> for that purpose. It has a type of <span class="fixed">randomR :: (RandomGen g, Random a) :: (a, a) -&gt; g -&gt; (a, g)</span>, meaning that it's kind of like <span class="fixed">random</span>, only it takes as its first parameter a pair of values that set the lower and upper bounds and the final value produced will be within those bounds.






There's also <span class="label function">randomRs</span>, which produces a stream of random values within our defined ranges. Check this out:



Nice, looks like a super secret password or something.

You may be asking yourself, what does this section have to do with I/O anyway? We haven't done anything concerning I/O so far. Well, so far we've always made our random number generator manually by making it with some arbitrary integer. The problem is, if we do that in our real programs, they will always return the same random numbers, which is no good for us. That's why <span class="fixed">System.Random</span> offers the <span class="label function">getStdGen</span> I/O action, which has a type of <span class="fixed">IO StdGen</span>. When your program starts, it asks the system for a good random number generator and stores that in a so called global generator. <span class="fixed">getStdGen</span> fetches you that global random generator when you bind it to something.

Here's a simple program that generates a random string.





Be careful though, just performing <span class="fixed">getStdGen</span> twice will ask the system for the same global generator twice. If you do this:





you will get the same string printed out twice! One way to get two different strings of length 20 is to set up an infinite stream and then take the first 20 characters and print them out in one line and then take the second set of 20 characters and print them out in the second line. For this, we can use the <span class="fixed">splitAt</span> function from <span class="fixed">Data.List</span>, which splits a list at some index and returns a tuple that has the first part as the first component and the second part as the second component.





Another way is to use the <span class="label function">newStdGen</span> action, which splits our current random generator into two generators. It updates the global random generator with one of them and encapsulates the other as its result.





Not only do we get a new random generator when we bind <span class="fixed">newStdGen</span> to something, the global one gets updated as well, so if we do <span class="fixed">getStdGen</span> again and bind it to something, we'll get a generator that's not the same as <span class="fixed">gen</span>.

Here's a little program that will make the user guess which number it's thinking of.






We make a function <span class="fixed">askForNumber</span>, which takes a random number generator and returns an I/O action that will prompt the user for a number and tell him if he guessed it right. In that function, we first generate a random number and a new generator based on the generator that we got as a parameter and call them <span class="fixed">randNumber</span> and <span class="fixed">newGen</span>. Let's say that the number generated was <span class="fixed">7</span>. Then we tell the user to guess which number we're thinking of. We perform <span class="fixed">getLine</span> and bind its result to <span class="fixed">numberString</span>. When the user enters <span class="fixed">7</span>, <span class="fixed">numberString</span> becomes <span class="fixed">"7"</span>. Next, we use <span class="fixed">when</span> to check if the string the user entered is an empty string. If it is, an empty I/O action of <span class="fixed">return ()</span> is performed, which effectively ends the program. If it isn't, the action consisting of that <i>do</i> block right there gets performed. We use <span class="fixed">read</span> on <span class="fixed">numberString</span> to convert it to a number, so <span class="fixed">number</span> is now <span class="fixed">7</span>.

<b>Excuse me!</b> If the user gives us some input here that <span class="fixed">read</span> can't read (like <span class="fixed">"haha"</span>), our program will crash with an ugly error message. If you don't want your program to crash on erronous input, use <span class="label function">reads</span>, which returns an empty list when it fails to read a string. When it succeeds, it returns a singleton list with a tuple that has our desired value as one component and a string with what it didn't consume as the other.

We check if the number that we entered is equal to the one generated randomly and give the user the appropriate message. And then we call <span class="fixed">askForNumber</span> recursively, only this time with the new generator that we got, which gives us an I/O action that's just like the one we performed, only it depends on a different generator and we perform it.

<span class="fixed">main</span> consists of just getting a random generator from the system and calling <span class="fixed">askForNumber</span> with it to get the initial action.

Here's our program in action!






Another way to make this same program is like this:





It's very similar to the previous version, only instead of making a function that takes a generator and then calls itself recursively with the new updated generator, we do all the work in <span class="fixed">main</span>. After telling the user whether they were correct in their guess or not, we update the global generator and then call <span class="fixed">main</span> again. Both approaches are valid but I like the first one more since it does less stuff in <span class="fixed">main</span> and also provides us with a function that we can reuse easily.



