title: Type variables

text: What do you think is the type of the [code]head[/code] function? Because [code]head[/code] takes a list of any type and returns the first element, so what could it be? Let's check!


Hmmm! What is this [code]a[/code]? Is it a type? Remember that we previously stated that types are written in capital case, so it can't exactly be a type. Because it's not in capital case it's actually a <em>type variable</em>. That means that [code]a[/code] can be of any type. This is much like generics in other languages, only in Haskell it's much more powerful because it allows us to easily write very general functions if they don't use any specific behavior of the types in them. Functions that have type variables are called <em>polymorphic functions</em>. The type declaration of [code]head[/code] states that it takes a list of any type and returns one element of that type.


Although type variables can have names longer than one character, we usually give them names of a, b, c, d ...

Remember [code]fst[/code]? It returns the first component of a pair. Let's examine its type.

We see that [code]fst[/code] takes a tuple which contains two types and returns an element which is of the same type as the pair's first component. That's why we can use [code]fst[/code] on a pair that contains any two types. Note that just because [code]a[/code] and [code]b[/code] are different type variables, they don't have to be different types. It just states that the first component's type and the return value's type are the same.
