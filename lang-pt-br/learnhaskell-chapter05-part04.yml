title: Quick, sort!

text: We have a list of items that can be sorted. Their type is an instance of the [code]Ord[/code] typeclass. And now, we want to sort them! There's a very cool algoritm for sorting called quicksort. It's a very clever way of sorting items. While it takes upwards of 10 lines to implement quicksort in imperative languages, the implementation is much shorter and elegant in Haskell. Quicksort has become a sort of poster child for Haskell. Therefore, let's implement it here, even though implementing quicksort in Haskell is considered really cheesy because everyone does it to showcase how elegant Haskell is.

So, the type signature is going to be [code]quicksort :: (Ord a) =&gt; [a] -&gt; [a][/code]. No surprises there. The edge condition? Empty list, as is expected. A sorted empty list is an empty list. Now here comes the main algorithm: <em>a sorted list is a list that has all the values smaller than (or equal to) the head of the list in front (and those values are sorted), then comes the head of the list in the middle and then come all the values that are bigger than the head (they're also sorted).</em> Notice that we said <i>sorted</i> two times in this definition, so we'll probably have to make the recursive call twice! Also notice that we defined it using the verb <i>is</i> to define the algorithm instead of saying <i>do this, do that, then do that ...</i>. That's the beauty of functional programming! How are we going to filter the list so that we get only the elements smaller than the head of our list and only elements that are bigger? List comprehensions. So, let's dive in and define this function.



Let's give it a small test run to see if it appears to behave correctly.



Booyah! That's what I'm talking about! So if we have, say [code][5,1,9,4,6,7,3][/code] and we want to sort it, this algorithm will first take the head, which is [code]5[/code] and then put it in the middle of two lists that are smaller and bigger than it. So at one point, you'll have [code][1,4,3] ++ [5] ++ [9,6,7][/code]. We know that once the list is sorted completely, the number [code]5[/code] will stay in the fourth place since there are 3 numbers lower than it and 3 numbers higher than it. Now, if we sort [code][1,4,3][/code] and [code][9,6,7][/code], we have a sorted list! We sort the two lists using the same function. Eventually, we'll break it up so much that we reach empty lists and an empty list is already sorted in a way, by virtue of being empty. Here's an illustration:


An element that is in place and won't move anymore is represented in [code]orange[/code]. If you read them from left to right, you'll see the sorted list. Although we chose to compare all the elements to the heads, we could have used any element to compare against. In quicksort, an element that you compare against is called a pivot. They're in [code]green[/code] here. We chose the head because it's easy to get by pattern matching. The elements that are smaller than the pivot are [code]light green[/code] and elements larger than the pivot are [code]dark green[/code]. The yellowish gradient thing represents an application of quicksort.
